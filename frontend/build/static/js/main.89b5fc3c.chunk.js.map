{"version":3,"sources":["components/input.ui.comp.js","components/apiTestSuite.comp.js","components/userCreate.comp.js","components/userGet.comp.js","components/favourCreate.comp.js","components/favourGet.comp.js","App.js","serviceWorker.js","index.js"],"names":["obj","name","age","Input","props","className","htmlFor","title","id","type","value","onChange","handleChange","placeholder","map","entry","i","ApiTestSuite","input","event","setState","target","handleSubmit","fetch","state","userToDeleteID","method","favourToDeleteID","console","log","preventDefault","getUsers","userToDelete","users","favours","bind","this","getFavours","response","json","style","border","InputGroup","Prepend","Text","FormControl","Form","Control","as","Container","maxWidth","Grid","container","spacing","item","xs","username","_id","onSubmit","favourID","favourToDelete","onClick","Component","UserCreate","password","admin","headers","body","JSON","stringify","UserGet","user","getUser","disabled","FavourCreate","creditor","debtor","description","repaid","reward","FavourGet","favour","getFavour","App","Fragment","Navbar","bg","fg","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","Item","Divider","inline","Button","variant","Row","Col","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89b5fc3c.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nvar obj = [{ name: \"one\", age: 5, \"desc\": \"Yes\" },\r\n    { name: \"two\", age: 50, \"desc\": \"Yefjggjs\" },\r\n    { name: \"three\", age: 500, \"desc\": \"Yejghjs\" }];\r\n\r\nvar list = [\"Item\", \"Me\", \"Yes\"];\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={props.name} className=\"form-label\">{props.title}</label>\r\n            <input\r\n                className=\"form-input\"\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                value={props.value}\r\n                onChange={props.handleChange}\r\n                placeholder={props.placeholder}\r\n            />\r\n            <ul>\r\n                {obj.map((entry, i) => {\r\n                    return (\r\n                        <li>{i}. {entry.name} (_ID: {entry.age})</li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from './input.ui.comp'\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { InputGroup, FormControl, Form } from 'react-bootstrap';\r\n\r\n\r\nimport { PersonCircle, KeyFill } from 'react-bootstrap-icons';\r\n\r\n\r\n\r\nexport class ApiTestSuite extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { userToDelete: '' };\r\n        this.state.users = [];\r\n        this.state.favours = [];\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        await this.getUsers();\r\n        await this.getFavours();\r\n    }\r\n\r\n    async getUsers() {\r\n        let response = await fetch('/api/users');\r\n        let { users } = await response.json();\r\n        this.setState({ users });\r\n        console.log(\"users: \");\r\n        console.log(this.state.users);\r\n    }\r\n\r\n    async getFavours() {\r\n        let response = await fetch('/api/favours');\r\n        let { favours } = await response.json();\r\n        this.setState({ favours });\r\n        console.log(response);\r\n    }\r\n    \r\n    handleChange = input => event => {\r\n        this.setState({ [input]: event.target.value });\r\n    }\r\n    \r\n    handleSubmit = input => event => {\r\n        if (input === 'userDelete'){\r\n            fetch('/api/users/deleteID/' + this.state.userToDeleteID, {\r\n                method: 'DELETE'\r\n            });\r\n        } else if (input === 'favourDelete') {\r\n            fetch('/api/favours/deleteID/' + this.state.favourToDeleteID, {\r\n                method: 'DELETE'\r\n            });\r\n        } else {\r\n            console.log(input);\r\n        }\r\n        event.preventDefault();\r\n        this.getUsers();\r\n    }\r\n\r\n    render () {\r\n        console.log(this.state.users);\r\n        console.log(this.state.favours);\r\n        return (\r\n            <div style={{border: '3px solid red'}}>\r\n                <InputGroup className=\"mb-1\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text id=\"basic-addon1\">\r\n                            <PersonCircle />\r\n                        </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl placeholder=\"Username\" />\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-1\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text id=\"basic-addon2\">\r\n                            <KeyFill />\r\n                        </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl placeholder=\"Password\" />\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text>Admin</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <Form>\r\n                        <Form.Control as=\"select\">\r\n                            <option>False</option>\r\n                            <option>True</option>\r\n                        </Form.Control>\r\n                    </Form>\r\n                </InputGroup>\r\n                <h1>API Test Suite</h1>\r\n                <Container maxWidth=\"lg\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <ul>\r\n                                    \r\n                                    {this.state.users.map((entry, i) => {\r\n                                        return (\r\n                                            <li>{i}. {entry.username} (_ID: {entry._id})</li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                            </Grid>\r\n                            <Grid xs={12}>\r\n                                <form onSubmit={this.handleSubmit('userDelete')}>\r\n                                    <label>\r\n                                        Delete User:\r\n                                        <input type=\"text\"\r\n                                            value={this.state.userToDelete}\r\n                                            onChange={this.handleChange('userToDeleteID')}\r\n                                        />\r\n                                    </label>\r\n                                    <input type=\"submit\" value=\"Submit\" />\r\n                                </form>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <ul>\r\n                                    {this.state.favours.map((entry, i) => {\r\n                                        return (\r\n                                            <li>{i}. {entry.favourID} (_ID: {entry._id})</li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <form onSubmit={this.handleSubmit('favourDelete')}>\r\n                                    <label>\r\n                                        Delete Favour:\r\n                                        <input type=\"text\"\r\n                                            value={this.state.favourToDelete}\r\n                                            onChange={this.handleChange('favourToDeleteID')}\r\n                                        />\r\n                                    </label>\r\n                                    <input type=\"submit\" value=\"Submit\" />\r\n                                </form>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid>\r\n                            <button onClick={() => {\r\n                                console.log(this.state.users);\r\n                                 }} type=\"button\">\r\n                                Console Log List\r\n                            </button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n                <Input />\r\n                <Input users={this.state.users} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ApiTestSuite","import React, { Component } from 'react';\r\nimport {InputGroup, FormControl} from 'react-bootstrap';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport class UserCreate extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { username: '' };\r\n        this.state = { password: '' };\r\n        this.state = { admin: '' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = input => event => {\r\n        this.setState({ [input]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        fetch('/api/users/add', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n            body: JSON.stringify({ \r\n                username: this.state.username,\r\n                password: this.state.password,\r\n                admin: this.state.admin\r\n            })\r\n        });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ border: '3px solid green' }}>\r\n                <h1>Create User</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Username:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.username}\r\n                            onChange={this.handleChange('username')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Password:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange('password')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Admin (true, false):\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.admin}\r\n                            onChange={this.handleChange('admin')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" onClick={() => {\r\n                        console.log(this.state.username)\r\n                    }} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCreate","import React, { Component } from 'react';\r\n\r\n\r\nexport class UserGet extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { username: '' };\r\n        this.state = { user: {\r\n            username: '',\r\n            password: '',\r\n            admin: ''\r\n        }};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = input => event => {\r\n        this.setState({ [input]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.getUser();\r\n        event.preventDefault();\r\n    }\r\n\r\n    async getUser(){\r\n        let response = await fetch('/api/users/' + this.state.username);\r\n        let user = await response.json();\r\n        console.log(user);\r\n        if(user === null){\r\n            user = {\r\n                username: '',\r\n                password: '#ERROR',\r\n                admin: '#ERROR'   \r\n            }\r\n        }\r\n        this.setState({ user });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ border: '3px solid green' }}>\r\n                <h1>Get User by name</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Username:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.username}\r\n                            onChange={this.handleChange('username')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Password:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.user.password}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Admin:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.user.admin}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserGet","import React, { Component } from 'react';\r\n\r\n\r\nexport class FavourCreate extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { favourID: '' };\r\n        this.state = { creditor: '' };\r\n        this.state = { debtor: '' };\r\n        this.state = { description: '' };\r\n        this.state = { repaid: '' };\r\n        this.state = { reward: '' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = input => event => {\r\n        this.setState({ [input]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        fetch('/api/favours/add', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n            body: JSON.stringify({ \r\n                favourID: this.state.favourID,\r\n                creditor: this.state.creditor,\r\n                debtor: this.state.debtor,\r\n                description: this.state.description,\r\n                repaid: this.state.repaid,\r\n                reward: this.state.reward\r\n            })\r\n        });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ border: '3px solid green' }}>\r\n                <h1>Create Favour</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        FavourID:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favourID}\r\n                            onChange={this.handleChange('favourID')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        creditor:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.creditor}\r\n                            onChange={this.handleChange('creditor')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        debtor:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.debtor}\r\n                            onChange={this.handleChange('debtor')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        description:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.description}\r\n                            onChange={this.handleChange('description')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        repaid:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.repaid}\r\n                            onChange={this.handleChange('repaid')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        reward:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.reward}\r\n                            onChange={this.handleChange('reward')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" onClick={() => {\r\n                        console.log(this.state.favourID)\r\n                    }} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FavourCreate","import React, { Component } from 'react';\r\n\r\n\r\nexport class FavourGet extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { favour: '' };\r\n        this.state = { favour: {\r\n            favourID: '',\r\n            creditor: '',\r\n            debtor: '',\r\n            description: '',\r\n            repaid: '',\r\n            reward: ''\r\n        }};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = input => event => {\r\n        this.setState({ [input]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.getFavour();\r\n        event.preventDefault();\r\n    }\r\n\r\n    async getFavour(){\r\n        let response = await fetch('/api/favours/' + this.state.favourID);\r\n        let favour = await response.json();\r\n        console.log(favour);\r\n        if(favour === null){\r\n            favour = {\r\n                favour: '',\r\n                password: '#ERROR',\r\n                admin: '#ERROR'   \r\n            }\r\n        }\r\n        this.setState({ favour });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ border: '3px solid green' }}>\r\n                <h1>Get Favour by name</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        FavourID:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favourID}\r\n                            onChange={this.handleChange('favourID')}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        creditor:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favour.creditor}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        debtor:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favour.debtor}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        description:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favour.description}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        repaid:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favour.repaid}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        reward:\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.favour.reward}\r\n                            disabled\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FavourGet","//Theme help from https://github.com/mui-org/material-ui/blob/master/docs/src/pages/getting-started/templates/dashboard/Dashboard.js\r\n\r\nimport React from 'react';\r\nimport './App.css';\r\nimport ApiTestSuite from './components/apiTestSuite.comp';\r\nimport UserCreate from './components/userCreate.comp';\r\nimport UserGet from './components/userGet.comp';\r\nimport FavourCreate from './components/favourCreate.comp';\r\nimport FavourGet from './components/favourGet.comp';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { InputGroup } from 'react-bootstrap';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport Input from './components/input.ui.comp'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { users: [] };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getUsers();\r\n    }\r\n\r\n    async getUsers() {\r\n        let response = await fetch('/api/users');\r\n        let { users } = await response.json();\r\n        this.setState({ users });\r\n        console.log(\"users: \");\r\n        console.log(this.state.users);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <Navbar bg=\"dark\" fg=\"light\">\r\n                        <Navbar.Brand href=\"#home\">AIP Ass2 LB v0.2</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link href=\"#home\">Users</Nav.Link>\r\n                                <Nav.Link href=\"#link\">Favours</Nav.Link>\r\n                                <Nav.Link href=\"#link\">Leaderboards</Nav.Link>\r\n                                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                                    <NavDropdown.Item href=\"#action/3.1\">Logout</NavDropdown.Item>\r\n                                    <NavDropdown.Item href=\"#action/3.2\">Account Settings</NavDropdown.Item>\r\n                                    <NavDropdown.Item href=\"#action/3.3\">App Information</NavDropdown.Item>\r\n                                    <NavDropdown.Divider />\r\n                                    <NavDropdown.Item href=\"#action/3.4\">Admin Control Panel</NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            </Nav>\r\n                            <Form inline>\r\n                                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                                <Button variant=\"outline-success\">Search</Button>\r\n                            </Form>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <UserCreate />\r\n                        </Col>\r\n                        <Col>\r\n                            <UserGet />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <FavourCreate />\r\n                        </Col>\r\n                        <Col>\r\n                            <FavourGet />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <ApiTestSuite />\r\n                    </Row>\r\n                </Container>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}